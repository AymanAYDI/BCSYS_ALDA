OBJECT Report 50040 Imp/Exp Phys. Inv. Jnl. Excel
{
  OBJECT-PROPERTIES
  {
    Date=07/03/16;
    Time=10:21:07;
    Modified=Yes;
    Version List=AC1.00,ALDA,2016;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Imp./Exp. Phys. Inventory Jnl. Excel;
               FRA=Imp./exp. Excel f. inventaire];
    ShowPrintStatus=No;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   FirstRow := 2;
                   FirstCol := 1;
                 END;

  }
  DATASET
  {
    { 5290;    ;DataItem;                    ;
               DataItemTable=Table233;
               OnPreDataItem=BEGIN
                               IF Import THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  PrintToExcel := NOT Import;

                                  IF PrintToExcel THEN
                                    MakeExcelInfo;
                                END;

               OnPostDataItem=BEGIN
                                IF PrintToExcel THEN
                                  CreateExcelbook;
                              END;

               ReqFilterFields=Journal Template Name,Name }

    { 5291;1   ;DataItem;                    ;
               DataItemTable=Table83;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.);
               OnAfterGetRecord=BEGIN
                                  IF PrintToExcel THEN
                                    MakeExcelDataBody;
                                END;

               DataItemLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Name) }

    { 5292;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF NOT Import THEN
                                 CurrReport.BREAK;

                               IF NOT CONFIRM(STRSUBSTNO(Text017,
                                  "Item Journal Batch".GETFILTER("Journal Template Name"),"Item Journal Batch".GETFILTER(Name)) + Text018,FALSE) THEN
                                 CurrReport.QUIT;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempExcelBuff.LOCKTABLE;

                                  ReadExcelSheet;
                                  AnalyzeData;
                                END;

               OnPostDataItem=BEGIN
                                TempExcelBuff.DELETEALL;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   ActivateFields;
                 END;

    }
    CONTROLS
    {
      { 1180250002;0;Container;
                  ContainerType=ContentArea }

      { 1180250001;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1180250003;2;Field  ;
                  Name=Import;
                  CaptionML=[ENU=Import;
                             FRA=Import];
                  SourceExpr=Import;
                  OnValidate=BEGIN
                               ActivateFields;
                             END;
                              }

      { 1180250006;2;Group  ;
                  CaptionML=[ENU=Import from;
                             FRA=Importer de] }

      { 1180250005;3;Field  ;
                  CaptionML=[ENU=Workbook File Name;
                             FRA=Nom du classeur];
                  SourceExpr=FileName;
                  Enabled=FileNameEnable;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 UploadFile;
                               END;
                                }

      { 1180250004;3;Field  ;
                  CaptionML=[ENU=Worksheet Name;
                             FRA=Nom de la feuille];
                  SourceExpr=SheetName;
                  Enabled=SheetNameEnable;
                  OnAssistEdit=VAR
                                 ExcelBuf@1001 : Record 370;
                               BEGIN
                                 IF ISSERVICETIER THEN
                                   SheetName := ExcelBuf.SelectSheetsName(UploadedFileName)
                                 ELSE
                                   SheetName := ExcelBuf.SelectSheetsName(FileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempExcelBuff@1180250015 : TEMPORARY Record 370;
      TempExcelBuff2@1180250014 : TEMPORARY Record 370;
      Window@1180250012 : Dialog;
      TotalRecNo@1180250011 : Integer;
      FirstCol@1180250010 : Integer;
      FirstRow@1180250009 : Integer;
      LastRow@1180250008 : Integer;
      TotalCol@1180250007 : Integer;
      TotalRow@1180250006 : Integer;
      RecNo@1180250005 : Integer;
      FileName@1180250004 : Text[250];
      SheetName@1180250003 : Text[80];
      Text001@1180250023 : TextConst 'FRA=Importation du fichier MicrosoftÂ© ExcelÂ©...';
      Text002@1180250022 : TextConst 'FRA=@1@@@@@@@@@@@@@@@';
      Text003@1180250021 : TextConst 'FRA=Importer fichier Excel';
      Text004@1180250020 : TextConst 'FRA=Analyse des donn‚es...\\';
      Text005@1000000006 : TextConst 'ENU="Imp./Exp. Phys. Inventory Jnl.;";FRA=Imp./exp. f. inventaire';
      Text006@1000000005 : TextConst 'ENU=Data;FRA=Donnâ€šes';
      Text007@1000000004 : TextConst 'ENU=Company Name;FRA=Nom de la sociâ€štâ€š';
      Text008@1000000003 : TextConst 'ENU=User ID;FRA=Code utilisateur';
      Text009@1000000002 : TextConst 'ENU=Report Name;FRA=Nom â€štat';
      Text010@1180250019 : TextConst 'FRA=Vous devez sp‚cifier le nom du classeur.';
      Text011@1180250018 : TextConst 'FRA=Vous devez sp‚cifier le nom de la feuille (du classeur).';
      Text012@1180250017 : TextConst 'FRA=Vous devez sp‚cifier la premiÅŠre ligne.';
      Text013@1180250016 : TextConst 'FRA=Vous devez sp‚cifier la premiŠre colonne.';
      Import@1180250001 : Boolean;
      PrintToExcel@1000000000 : Boolean;
      Text014@1000000001 : TextConst 'ENU=Date;FRA=Date';
      Text015@1000000007 : TextConst 'ENU=Filters;FRA=Filtres';
      Text016@1000000008 : TextConst 'ENU=Inventory;FRA=Inventaire';
      Text017@1180250025 : TextConst 'ENU=If you import Journal Template Name %1, Name %2, the existing lines will be modified.\\;FRA=Si vous importer le modÅ le feuille %1, nom %2 les lignes existantes seront modifi‚es.\\';
      Text018@1180250024 : TextConst 'ENU=Do you want to update the lines?;FRA=Souhaitez-vous mettre les lignes … jour ?';
      FileNameEnable@1180250026 : Boolean INDATASET;
      SheetNameEnable@1180250002 : Boolean INDATASET;
      UploadedFileName@1180250027 : Text[1024];
      FileMgt@1000000009 : Codeunit 419;
      ExcelFileType@1000000010 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Excel Files (*.xls)|*.xls;FRA=Fichiers Excel (*.xls)|*.xls';

    PROCEDURE MakeExcelInfo@3();
    BEGIN
      TempExcelBuff.SetUseInfoSheet;
      TempExcelBuff.AddInfoColumn(FORMAT(Text007),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(COMPANYNAME,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text009),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(FORMAT(Text005),FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text008),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(USERID,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text014),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(TODAY,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text015),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn("Item Journal Batch".GETFILTERS,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.ClearNewRow;
      MakeExcelDataHeader;
    END;

    LOCAL PROCEDURE MakeExcelDataHeader@2();
    BEGIN
      WITH "Item Journal Line" DO BEGIN
        TempExcelBuff.AddColumn(FIELDCAPTION("Line No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Posting Date"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Document No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Item No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Cross-Reference No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION(Description),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Last Phys. Invt. Date"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Item Shelf No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Location Code"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Qty. (Calculated)"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Qty. (Phys. Inventory)"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION(Quantity),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Unit of Measure Code"),FALSE,'',TRUE,FALSE,TRUE,'',0);
      END;//DO
    END;

    PROCEDURE MakeExcelDataBody@4();
    VAR
      BlankFiller@1000 : Text[250];
    BEGIN
      TempExcelBuff.NewRow;
      WITH "Item Journal Line" DO BEGIN
        TempExcelBuff.AddColumn(FORMAT("Line No."),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Posting Date"),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Document No."),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn("Item No.",FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn("Cross-Reference No.",FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn(Description,FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Last Phys. Invt. Date"),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Item Shelf No."),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Location Code"),FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn(FORMAT("Qty. (Calculated)"),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Qty. (Phys. Inventory)"),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT(Quantity),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Unit of Measure Code"),FALSE,'',FALSE,FALSE,FALSE,'',0);
      END;
    END;

    PROCEDURE CreateExcelbook@1();
    BEGIN
      TempExcelBuff.CreateBook(FileName,SheetName);
      //TempExcelBuff.CreateSheet(Text006,Text015,COMPANYNAME,USERID);
      TempExcelBuff.GiveUserControl;
      ERROR('');
    END;

    PROCEDURE MakeExcelSomme@1180250038();
    BEGIN
      {
      TempExcelBuff.NewRow;
      TempExcelBuff.AddColumn('TOTAUX',FALSE,'',TRUE,FALSE,TRUE,'',0);
      TempExcelBuff.AddColumn('',FALSE,'',FALSE,FALSE,TRUE,'',0);

      IF SoldeDebDPer <>0  THEN
        TempExcelBuff.AddColumn(SoldeDebDPer,FALSE,'',TRUE,FALSE,TRUE,'')
      ELSE
        TempExcelBuff.AddColumn('',FALSE,'',FALSE,FALSE,TRUE,'',0);
      }
    END;

    PROCEDURE ReadExcelSheet@1180250001();
    BEGIN
      IF ISSERVICETIER THEN
        IF UploadedFileName = '' THEN
          UploadFile
        ELSE
          FileName := UploadedFileName;

      TempExcelBuff.OpenBook(FileName,SheetName);
      TempExcelBuff.ReadSheet;

      IF TempExcelBuff.FINDLAST THEN
        LastRow := TempExcelBuff."Row No.";

      IF TempExcelBuff.FINDFIRST THEN BEGIN
        TempExcelBuff.SETRANGE("Row No.",1);
        TotalCol := TempExcelBuff.COUNT - (FirstCol - 1);
        TempExcelBuff.SETRANGE("Row No.");
        TempExcelBuff.SETFILTER("Row No.",'>=%1',FirstRow);
        TempExcelBuff.SETFILTER("Column No.",'>=%1',FirstCol);
        TotalRow := LastRow - (FirstRow - 1);
      END;
    END;

    PROCEDURE AnalyzeData@1180250003();
    VAR
      ItemJnlTemp@1180250010 : Record 82;
      ItemJnlBatch@1180250011 : Record 233;
      ItemJnlLine@1180250008 : Record 83;
      JnlTempName@1180250012 : Code[10];
      JnlBatchName@1180250013 : Code[10];
      PostingDate@1180250001 : Date;
      PostingDateTime@1180250014 : DateTime;
      DocNo@1180250002 : Code[20];
      ItemNo@1180250003 : Code[20];
      CrossRefExt@1180250004 : Code[20];
      Descrip@1180250005 : Text[30];
      LocationCode@1180250006 : Code[10];
      QtyPhysInv@1180250007 : Decimal;
      LineNo@1180250009 : Integer;
    BEGIN
      Window.OPEN(
        Text004 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := TempExcelBuff.COUNT;
      RecNo := 0;

      WITH "Item Journal Batch" DO BEGIN
        JnlTempName := GETFILTER("Journal Template Name");
        JnlBatchName := GETFILTER(Name);
      END;
      ItemJnlTemp.GET(JnlTempName);
      ItemJnlBatch.GET(JnlTempName,JnlBatchName);

      TempExcelBuff.RESET;
      IF TempExcelBuff.FINDFIRST THEN
        REPEAT
          TempExcelBuff2 := TempExcelBuff;
          TempExcelBuff2.INSERT;
        UNTIL TempExcelBuff.NEXT = 0;

      TempExcelBuff.RESET;
      IF TempExcelBuff.FINDSET(FALSE,FALSE) THEN BEGIN
        FOR RecNo := FirstRow TO TotalRecNo - 1 DO BEGIN
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          TempExcelBuff.SETRANGE("Row No.",RecNo);
          IF TempExcelBuff.FINDSET(FALSE,FALSE) THEN BEGIN
            TempExcelBuff2.RESET;
            TempExcelBuff2.SETRANGE("Row No.",TempExcelBuff."Row No.");
            IF TempExcelBuff2.FIND('-') THEN
              REPEAT
                CASE TempExcelBuff2."Column No." OF
                  1:EVALUATE(LineNo,TempExcelBuff2."Cell Value as Text");
                  2:IF ISSERVICETIER THEN BEGIN
                    EVALUATE(PostingDateTime,TempExcelBuff2."Cell Value as Text");
                    PostingDate := DT2DATE(PostingDateTime);
                  END ELSE
                    EVALUATE(PostingDate,TempExcelBuff2."Cell Value as Text");
                  3:DocNo := FORMAT(TempExcelBuff2."Cell Value as Text");
                  4:ItemNo := FORMAT(TempExcelBuff2."Cell Value as Text");
                  5:CrossRefExt := FORMAT(TempExcelBuff2."Cell Value as Text");
                  6:Descrip := FORMAT(TempExcelBuff2."Cell Value as Text");
                  //7: := FORMAT(TempExcelBuff2."Cell Value as Text");
                  //8: := FORMAT(TempExcelBuff2."Cell Value as Text");
                  9:LocationCode := FORMAT(TempExcelBuff2."Cell Value as Text");
                  //10: := FORMAT(TempExcelBuff2."Cell Value as Text");
                  11:EVALUATE(QtyPhysInv,TempExcelBuff2."Cell Value as Text");
                  //12: := FORMAT(TempExcelBuff2."Cell Value as Text");
                  //13: := FORMAT(TempExcelBuff2."Cell Value as Text");
                END;//CASE
              UNTIL TempExcelBuff2.NEXT = 0;
            ItemJnlLine.GET(JnlTempName,JnlBatchName,LineNo);
            IF PostingDate <> ItemJnlLine."Posting Date" THEN
              ItemJnlLine.VALIDATE("Posting Date",PostingDate);
            IF DocNo <> ItemJnlLine."Document No." THEN
              ItemJnlLine.VALIDATE("Document No.",DocNo);
            IF ItemNo <> ItemJnlLine."Item No." THEN
              ItemJnlLine.VALIDATE("Item No.",ItemNo);
            IF CrossRefExt <> ItemJnlLine."Cross-Reference No." THEN
              ItemJnlLine.VALIDATE("Cross-Reference No.",CrossRefExt);
            IF Descrip <> ItemJnlLine.Description THEN
              ItemJnlLine.Description := Descrip;
            IF LocationCode <> ItemJnlLine."Location Code" THEN
              ItemJnlLine.VALIDATE("Location Code",LocationCode);
            IF QtyPhysInv <> ItemJnlLine."Qty. (Phys. Inventory)" THEN
              ItemJnlLine.VALIDATE("Qty. (Phys. Inventory)",QtyPhysInv);
            ItemJnlLine.MODIFY;
          END;
        END;//FOR
      END;
      Window.CLOSE;
    END;

    PROCEDURE ActivateFields@1180250002();
    BEGIN
        FileNameEnable := Import;
        SheetNameEnable := Import;
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      UploadFile;
    END;

    PROCEDURE UploadFile@6();
    VAR
      CommonDialogMgt@1000 : Codeunit 412;
    BEGIN
      UploadedFileName := FileMgt.UploadFileWithFilter(Text003, '*.xlsx', ExcelFileType, 'xlsx');
      FileName := UploadedFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

