OBJECT Report 50057 Imp/Exp Gen.Jnl. Excel
{
  OBJECT-PROPERTIES
  {
    Date=21/11/19;
    Time=17:20:00;
    Modified=Yes;
    Version List=AC1.00,ALDA,2016;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rm;
    CaptionML=[ENU=Imp/Exp Gen.Jnl. Excel;
               FRA=Imp./exp. Excel f. compta.];
    ShowPrintStatus=No;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   FirstRow := 2;
                   FirstCol := 1;
                 END;

    OnPostReport=VAR
                   EDILogEntry@1180250001 : Record 50004;
                 BEGIN
                   COMMIT;
                   EDILogEntry.SETRANGE("EDI Code",EDILog."EDI Code");
                   EDILogEntry.SETRANGE("Treatment Date",EDILog."Treatment Date");
                   PAGE.RUNMODAL(50006,EDILogEntry);
                 END;

  }
  DATASET
  {
    { 5290;    ;DataItem;                    ;
               DataItemTable=Table232;
               OnPreDataItem=BEGIN
                               IF Import THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  PrintToExcel := NOT Import;

                                  IF PrintToExcel THEN
                                    MakeExcelInfo;
                                END;

               OnPostDataItem=BEGIN
                                IF PrintToExcel THEN
                                  CreateExcelbook;
                              END;

               ReqFilterFields=Journal Template Name,Name }

    { 5291;1   ;DataItem;                    ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.);
               OnAfterGetRecord=BEGIN
                                  IF PrintToExcel THEN
                                    MakeExcelDataBody;
                                END;

               DataItemLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Name) }

    { 5292;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF NOT Import THEN
                                 CurrReport.BREAK;

                               IF NOT CONFIRM(STRSUBSTNO(Text017,
                                  "Gen. Journal Batch".GETFILTER("Journal Template Name"),"Gen. Journal Batch".GETFILTER(Name)) + Text018,FALSE) THEN
                                 CurrReport.QUIT;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempExcelBuff.LOCKTABLE;

                                  ReadExcelSheet;
                                  AnalyzeData;
                                END;

               OnPostDataItem=BEGIN
                                TempExcelBuff.DELETEALL;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   ActivateFields;
                   //BC6 EABO Multiple banks
                   BankAccountFilter := "Gen. Journal Batch".GETFILTER("Journal Template Name");
                 END;

      OnQueryClosePage=VAR
                         LBankAccount@1000000000 : Record 270;
                       BEGIN
                         //BC6 EABO Multiple banks
                          IF Import THEN
                           LBankAccount.GET(BankAccountCode);
                         //BC6 EABO Multiple banks
                       END;

    }
    CONTROLS
    {
      { 1180250002;0;Container;
                  ContainerType=ContentArea }

      { 1180250001;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1180250003;2;Field  ;
                  Name=Import;
                  CaptionML=[ENU=Import;
                             FRA=Import];
                  SourceExpr=Import;
                  OnValidate=BEGIN
                               ActivateFields;
                               //BC6 EABO Multiple banks
                               ImportOnAfterValidate;
                             END;
                              }

      { 1000000000;2;Field  ;
                  CaptionML=[ENU=Bank Account;
                             FRA=Compte bancaire];
                  SourceExpr=BankAccountCode;
                  TableRelation="Bank Account".No.;
                  Enabled=BankAccountEnable }

      { 1180250006;2;Group  ;
                  CaptionML=[ENU=Import from;
                             FRA=Importer de] }

      { 1180250005;3;Field  ;
                  CaptionML=[ENU=Workbook File Name;
                             FRA=Nom du classeur];
                  SourceExpr=FileName;
                  Enabled=FileNameEnable;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 UploadFile;
                               END;
                                }

      { 1180250004;3;Field  ;
                  CaptionML=[ENU=Worksheet Name;
                             FRA=Nom de la feuille];
                  SourceExpr=SheetName;
                  Enabled=SheetNameEnable;
                  OnAssistEdit=VAR
                                 ExcelBuf@1001 : Record 370;
                               BEGIN
                                 IF ISSERVICETIER THEN
                                   SheetName := ExcelBuf.SelectSheetsName(UploadedFileName)
                                 ELSE
                                   SheetName := ExcelBuf.SelectSheetsName(FileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempExcelBuff@1180250015 : TEMPORARY Record 370;
      TempExcelBuff2@1180250014 : TEMPORARY Record 370;
      ComDialogMng@1180250013 : Codeunit 412;
      Window@1180250012 : Dialog;
      TotalRecNo@1180250011 : Integer;
      FirstCol@1180250010 : Integer;
      FirstRow@1180250009 : Integer;
      LastRow@1180250008 : Integer;
      TotalCol@1180250007 : Integer;
      TotalRow@1180250006 : Integer;
      RecNo@1180250005 : Integer;
      FileName@1180250004 : Text[250];
      SheetName@1180250003 : Text[80];
      Text001@1180250023 : TextConst 'FRA=Importation du fichier MicrosoftÂ© ExcelÂ©...';
      Text002@1180250022 : TextConst 'FRA=@1@@@@@@@@@@@@@@@';
      Text003@1180250021 : TextConst 'FRA=Importer fichier Excel';
      Text004@1180250020 : TextConst 'FRA=Analyse des donn‚es...\\';
      Text005@1000000006 : TextConst 'ENU="Imp./Exp. Gen. journal;";FRA=Imp./exp. f. comptabilitâ€š';
      Text006@1000000005 : TextConst 'ENU=Data;FRA=Donn‚es';
      Text007@1000000004 : TextConst 'ENU=Company Name;FRA=Nom de la sociâ€štâ€š';
      Text008@1000000003 : TextConst 'ENU=User ID;FRA=Code utilisateur';
      Text009@1000000002 : TextConst 'ENU=Report Name;FRA=Nom â€štat';
      Text010@1000000014 : TextConst 'FRA=Vous devez sp‚cifier le nom du classeur.';
      Text011@1000000013 : TextConst 'FRA=Vous devez sp‚cifier le nom de la feuille (du classeur).';
      Text012@1000000012 : TextConst 'FRA=Vous devez sp‚cifier la premiÅŠre ligne.';
      Text013@1000000011 : TextConst 'FRA=Vous devez sp‚cifier la premiŠre colonne.';
      Import@1180250001 : Boolean;
      PrintToExcel@1000000000 : Boolean;
      Text014@1000000001 : TextConst 'ENU=Date;FRA=Date';
      Text015@1000000007 : TextConst 'ENU=Filters;FRA=Filtres';
      Text016@1000000008 : TextConst 'ENU=Inventory;FRA=Inventaire';
      Text017@1180250025 : TextConst 'ENU=If you import Journal Template Name %1, Name %2, the existing lines will be modified.\\;FRA=Si vous importer le modÅ le feuille %1, nom %2 les lignes existantes seront modifi‚es.\\';
      Text018@1180250024 : TextConst 'ENU=Do you want to update the lines?;FRA=Souhaitez-vous mettre les lignes … jour ?';
      FileNameEnable@1180250026 : Boolean INDATASET;
      SheetNameEnable@1180250002 : Boolean INDATASET;
      UploadedFileName@1180250027 : Text[1024];
      Text019@1180250028 : TextConst 'FRA=Ligne(s) du fichier Excel non trait‚e(s) : \%1';
      Msgbox@1180250029 : Text[1024];
      Text020@1180250030 : TextConst 'FRA=Client non trouv‚';
      Text021@1180250031 : TextConst 'FRA=Nø facture ind‚termin‚';
      Text022@1180250032 : TextConst 'FRA=Montant facture et rŠglement diff‚rent';
      EDILog@1180250033 : Record 50001;
      Text023@1180250034 : TextConst 'FRA=Facture non trouv‚e';
      GLSetup@1180250036 : Record 98;
      Currency@1180250035 : Record 4;
      GenJnlLine@1180250037 : Record 81;
      GenJnlLine2@1180250049 : Record 81;
      GenJnlLineApply@1180250038 : Boolean;
      ApplyingAmount@1180250042 : Decimal;
      ApplnDate@1180250041 : Date;
      ApplnType@1180250040 : ' ,Applies-to Doc. No.,Applies-to ID';
      CalcType@1180250039 : 'Direct,GenJnlLine,SalesHeader,ServHeader';
      ApplnCurrencyCode@1180250043 : Code[10];
      ApplyingCustLedgEntry@1180250045 : TEMPORARY Record 21;
      AppliedCustLedgEntry@1180250044 : Record 21;
      AppliedAmount@1180250047 : Decimal;
      PmtDiscAmount@1180250046 : Decimal;
      DifferentCurrenciesInAppln@1180250048 : Boolean;
      AmountRoundingPrecision@1180250050 : Decimal;
      GenJnlPostLine@1180250051 : Codeunit 12;
      ApplnRounding@1180250052 : Decimal;
      ApplnRoundingPrecision@1180250053 : Decimal;
      CustEntrySetApplID@1180250054 : Codeunit 101;
      Text024@1180250055 : TextConst 'FRA=Facture non ouverte';
      FileMgt@1000000009 : Codeunit 419;
      ExcelFileType@1000000010 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Excel Files (*.xls)|*.xls;FRA=Fichiers Excel (*.xls)|*.xls';
      PaymentToleranceMgt@1000000015 : Codeunit 426;
      CurrExchRate@1000000017 : Record 330;
      BankAccountCode@1000000016 : Code[10];
      BankAccountEnable@1000000018 : Boolean INDATASET;
      BankAccountFilter@1000000019 : Code[10];

    PROCEDURE MakeExcelInfo@3();
    BEGIN
      TempExcelBuff.SetUseInfoSheet;
      TempExcelBuff.AddInfoColumn(FORMAT(Text007),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(COMPANYNAME,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text009),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(FORMAT(Text005),FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text008),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(USERID,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text014),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn(TODAY,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.NewRow;
      TempExcelBuff.AddInfoColumn(FORMAT(Text015),FALSE,'',TRUE,FALSE,FALSE,'',0);
      TempExcelBuff.AddInfoColumn("Gen. Journal Batch".GETFILTERS,FALSE,'',FALSE,FALSE,FALSE,'',0);
      TempExcelBuff.ClearNewRow;
      MakeExcelDataHeader;
    END;

    LOCAL PROCEDURE MakeExcelDataHeader@2();
    BEGIN
      WITH "Gen. Journal Line" DO BEGIN
        TempExcelBuff.AddColumn(FIELDCAPTION("Line No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Posting Date"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Document Type"),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Account No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION(Description),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Applies-to Doc. No."),FALSE,'',TRUE,FALSE,TRUE,'',0);
        TempExcelBuff.AddColumn(FIELDCAPTION("Credit Amount"),FALSE,'',TRUE,FALSE,TRUE,'',0);
      END;//DO
    END;

    PROCEDURE MakeExcelDataBody@4();
    VAR
      BlankFiller@1000 : Text[250];
    BEGIN
      TempExcelBuff.NewRow;
      WITH "Gen. Journal Line" DO BEGIN
        TempExcelBuff.AddColumn(FORMAT("Line No."),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Posting Date"),FALSE,'',FALSE,FALSE,FALSE,'',0);
        TempExcelBuff.AddColumn(FORMAT("Document Type"),FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn("Account No.",FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn(Description,FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn(("Applies-to Doc. No."),FALSE,'',FALSE,FALSE,FALSE,'@',0);
        TempExcelBuff.AddColumn(FORMAT("Credit Amount"),FALSE,'',FALSE,FALSE,FALSE,'',0);
      END;
    END;

    PROCEDURE CreateExcelbook@1();
    BEGIN
      TempExcelBuff.CreateBook(FileName, Text006);
      TempExcelBuff.GiveUserControl;
      ERROR('');
    END;

    PROCEDURE MakeExcelSomme@1180250038();
    BEGIN
      {
      TempExcelBuff.NewRow;
      TempExcelBuff.AddColumn('TOTAUX',FALSE,'',TRUE,FALSE,TRUE,'',0);
      TempExcelBuff.AddColumn('',FALSE,'',FALSE,FALSE,TRUE,'',0);

      IF SoldeDebDPer <>0  THEN
        TempExcelBuff.AddColumn(SoldeDebDPer,FALSE,'',TRUE,FALSE,TRUE,'')
      ELSE
        TempExcelBuff.AddColumn('',FALSE,'',FALSE,FALSE,TRUE,'',0);
      }
    END;

    PROCEDURE ReadExcelSheet@1180250001();
    BEGIN
      IF ISSERVICETIER THEN
        IF UploadedFileName = '' THEN
          UploadFile
        ELSE
          FileName := UploadedFileName;

      TempExcelBuff.OpenBook(FileName,SheetName);
      TempExcelBuff.ReadSheet;

      IF TempExcelBuff.FINDLAST THEN
        LastRow := TempExcelBuff."Row No.";

      IF TempExcelBuff.FINDFIRST THEN BEGIN
        TempExcelBuff.SETRANGE("Row No.",1);
        TotalCol := TempExcelBuff.COUNT - (FirstCol - 1);
        TempExcelBuff.SETRANGE("Row No.");
        TempExcelBuff.SETFILTER("Row No.",'>=%1',FirstRow);
        TempExcelBuff.SETFILTER("Column No.",'>=%1',FirstCol);
        TotalRow := LastRow - (FirstRow - 1);
      END;
    END;

    PROCEDURE AnalyzeData@1180250003();
    VAR
      GenJournalTemp@1180250010 : Record 80;
      GenJournalBatch@1180250011 : Record 232;
      GenJournalLine@1180250008 : Record 81;
      NoSeriesMgt@1180250009 : Codeunit 396;
      JnlTempName@1180250012 : Code[10];
      JnlBatchName@1180250013 : Code[10];
      PostingDate@1180250001 : Date;
      DocNo@1180250002 : Code[20];
      CreditAmt@1180250003 : Decimal;
      CustNo@1180250004 : Code[20];
      Descrip@1180250005 : Text[256];
      NextLineNo@1180250006 : Integer;
      PostingDateTime@1180250007 : DateTime;
      PostedInvNo@1180250014 : Code[20];
      StartingPosInvNo@1180250015 : Integer;
      Cust@1180250016 : Record 18;
      EntryNo@1180250017 : Integer;
      OnErr@1180250018 : Boolean;
      CustLgdEntry@1180250019 : Record 21;
      PosSpace@1180250020 : Integer;
      Found@1180250021 : Boolean;
    BEGIN
      Window.OPEN(
        Text004 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := TempExcelBuff.COUNT;
      RecNo := 0;

      EDILog.INIT;
      //BC6 EABO Multiple banks >>
      //EDILog."EDI Code" := 'HSBC';
      EDILog."EDI Code" := BankAccountCode;
      //BC6 EABO Multiple banks <<
      EDILog.Direction := EDILog.Direction::Import;
      EDILog.Filename := FileName;
      EDILog."Treatment Date" := CURRENTDATETIME;
      EDILog.INSERT;

      WITH "Gen. Journal Batch" DO BEGIN
        JnlTempName := GETFILTER("Journal Template Name");
        JnlBatchName := GETFILTER(Name);
      END;
      GenJournalTemp.GET(JnlTempName);
      GenJournalBatch.GET(JnlTempName,JnlBatchName);

      TempExcelBuff.RESET;
      IF TempExcelBuff.FINDFIRST THEN
        REPEAT
          TempExcelBuff2 := TempExcelBuff;
          TempExcelBuff2.INSERT;
        UNTIL TempExcelBuff.NEXT = 0;

      TempExcelBuff.RESET;
      IF TempExcelBuff.FINDSET(FALSE,FALSE) THEN BEGIN
        FOR RecNo := FirstRow TO TotalRecNo - 1 DO BEGIN
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          TempExcelBuff.SETRANGE("Row No.",RecNo);
          IF TempExcelBuff.FINDSET(FALSE,FALSE) THEN BEGIN
            TempExcelBuff2.RESET;
            TempExcelBuff2.SETRANGE("Row No.",TempExcelBuff."Row No.");
            IF TempExcelBuff2.FIND('-') THEN
              REPEAT
                CASE TempExcelBuff2."Column No." OF
                  1:EVALUATE(EntryNo,TempExcelBuff2."Cell Value as Text");
                  2:IF ISSERVICETIER THEN BEGIN
                    EVALUATE(PostingDateTime,TempExcelBuff2."Cell Value as Text");
                    PostingDate := DT2DATE(PostingDateTime);
                  END ELSE
                    EVALUATE(PostingDate,TempExcelBuff2."Cell Value as Text");
                  4:CustNo := FORMAT(TempExcelBuff2."Cell Value as Text");
                  6:Descrip := FORMAT(TempExcelBuff2."Cell Value as Text");
                  7:EVALUATE(CreditAmt,TempExcelBuff2."Cell Value as Text");
                END;//CASE
              UNTIL TempExcelBuff2.NEXT = 0;

              StartingPosInvNo := STRPOS(Descrip ,'FV');
              IF StartingPosInvNo <> 0 THEN BEGIN
                IF StartingPosInvNo > 1 THEN
                  Descrip := COPYSTR(Descrip,StartingPosInvNo);
                PosSpace := STRPOS(Descrip ,' ');
                IF PosSpace <> 0 THEN
                  Descrip := COPYSTR(Descrip,1,STRPOS(Descrip ,' ') - 1);
                PostedInvNo := Descrip;
              END;

              CustLgdEntry.RESET;
              CustLgdEntry.SETRANGE("Document Type",CustLgdEntry."Document Type"::Invoice);
              CustLgdEntry.SETRANGE("Document No.",PostedInvNo);
              Found :=  CustLgdEntry.FINDFIRST;
              CustLgdEntry.CALCFIELDS("Amount (LCY)");

              OnErr := FALSE;
              CASE FALSE OF
                Cust.GET(CustNo):BEGIN
                   OnErr := TRUE;
                   Msgbox := STRSUBSTNO('%1 : %2',EntryNo,Text020);
                END;
                PostedInvNo <> '':BEGIN
                  OnErr := TRUE;
                  Msgbox := STRSUBSTNO('%1 : %2',EntryNo,Text021);
                END;
                CreditAmt = CustLgdEntry."Amount (LCY)":BEGIN
                  OnErr := TRUE;
                  Msgbox := STRSUBSTNO('%1 : %2',EntryNo,Text022);
                END;
                Found:BEGIN
                  OnErr := TRUE;
                  Msgbox := STRSUBSTNO('%1 : %2',EntryNo,Text023);
                END;
                Found AND CustLgdEntry.Open:BEGIN
                  OnErr := TRUE;
                  Msgbox := STRSUBSTNO('%1 : %2',EntryNo,Text024);
                END;
                ELSE
                  Msgbox := STRSUBSTNO('%1 : %2',EntryNo,'OK');
              END;//CASE

              IF NOT OnErr THEN BEGIN
                IF DocNo = '' THEN BEGIN
                  IF GenJournalBatch."No. Series" <> '' THEN BEGIN
                    CLEAR(NoSeriesMgt);
                    DocNo := NoSeriesMgt.GetNextNo(GenJournalBatch."No. Series",PostingDate,FALSE);
                    COMMIT;
                  END;
                END ELSE
                  DocNo := INCSTR(DocNo);

                NextLineNo += 10000;
                GenJournalLine.INIT;
                GenJournalLine."Journal Template Name" := JnlTempName;
                GenJournalLine."Journal Batch Name" := JnlBatchName;
                GenJournalLine."Line No." := NextLineNo;
                GenJournalLine.INSERT(TRUE);
                GenJournalLine.VALIDATE("Posting Date",PostingDate);
                GenJournalLine.VALIDATE("Source Code",GenJournalTemp."Source Code");
                GenJournalLine.VALIDATE("Document Type",GenJournalLine."Document Type"::Payment);
                GenJournalLine.VALIDATE("Document No.",DocNo);
                GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);
                GenJournalLine.VALIDATE("Account No.",CustNo);
                GenJournalLine.VALIDATE("Credit Amount",CreditAmt);
                GenJournalLine.MODIFY;
                Descrip := 'VIR ' + GenJournalLine.Description;
                GenJournalLine.Description := Descrip;
                GenJournalLine.MODIFY;

                RunGenJnlApply(GenJournalLine,PostedInvNo);

                NextLineNo += 10000;
                GenJournalLine.INIT;
                GenJournalLine."Journal Template Name" := JnlTempName;
                GenJournalLine."Journal Batch Name" := JnlBatchName;
                GenJournalLine."Line No." := NextLineNo;
                GenJournalLine.INSERT(TRUE);
                GenJournalLine.VALIDATE("Posting Date",PostingDate);
                GenJournalLine.VALIDATE("Source Code",GenJournalTemp."Source Code");
                GenJournalLine.VALIDATE("Document Type",GenJournalLine."Document Type"::Payment);
                GenJournalLine."Document No." := DocNo;
                GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"Bank Account");
                //BC6 EABO Multiple banks >>
                //GenJournalLine.VALIDATE("Account No.",'HSBC');
                GenJournalLine.VALIDATE("Account No.",BankAccountCode);
                //BC6 EABO Multiple banks <<
                GenJournalLine.VALIDATE("Debit Amount",CreditAmt);
                GenJournalLine.MODIFY;
                GenJournalLine.Description := Descrip;
                GenJournalLine.MODIFY;
              END ELSE
                CreateEDILogEntry(EDILog."EDI Code",EDILog."Treatment Date",Msgbox,0,0);
          END;
        END;//FOR
      END;
      Window.CLOSE;
    END;

    PROCEDURE ActivateFields@1180250002();
    BEGIN
        FileNameEnable := Import;
        SheetNameEnable := Import;
      //BC6 EABO Multiple banks >>
      BankAccountEnable := Import;
      //BC6 EABO Multiple banks
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      UploadFile;
    END;

    PROCEDURE UploadFile@6();
    VAR
      CommonDialogMgt@1000 : Codeunit 412;
    BEGIN
      UploadedFileName := FileMgt.UploadFileWithFilter(Text003, '*.xlsx', ExcelFileType, 'xlsx');
      FileName := UploadedFileName;
    END;

    PROCEDURE CreateEDILogEntry@1180250011(EDICode@1180250003 : Code[10];EDILogDT@1180250002 : DateTime;String@1180250001 : Text[250];Status@1180250006 : ' ,OK,Error';EntryNo2@1180250007 : Integer);
    VAR
      EDILogEntry@1180250004 : Record 50004;
      LineNo@1180250005 : Integer;
    BEGIN
      EDILogEntry.RESET;
      EDILogEntry.SETRANGE("EDI Code",EDICode);
      EDILogEntry.SETRANGE("Treatment Date",EDILogDT);
      IF EDILogEntry.FINDLAST THEN
        LineNo := EDILogEntry."Ligne No."
      ELSE
        LineNo := 0;

      LineNo += 10000;

      EDILogEntry.INIT;
      EDILogEntry."EDI Code" := EDICode;
      EDILogEntry."Treatment Date" := EDILogDT;
      EDILogEntry."Ligne No." := LineNo;
      EDILogEntry."Error Text" := String;
      EDILogEntry.Status := Status;
      EDILogEntry."Applied E.D.I. Entry No." := EntryNo2;
      EDILogEntry.INSERT;
    END;

    PROCEDURE RunGenJnlApply@1180250006(VAR FromGenJnlLine@1180250001 : Record 81;FromPostedInvNo@1180250015 : Code[20]);
    VAR
      GenJnlLine@1180250014 : Record 81;
      CustLedgEntry@1180250013 : Record 21;
      VendLedgEntry@1180250012 : Record 25;
      GLSetup@1180250011 : Record 98;
      Currency@1180250010 : Record 4;
      ApplyCustEntries@1180250009 : Page 232;
      ApplyVendEntries@1180250008 : Page 233;
      GenJnlPostLine@1180250007 : Codeunit 12;
      PaymentToleranceMgt@1180250006 : Codeunit 426;
      AccNo@1180250005 : Code[20];
      CurrencyCode2@1180250004 : Code[10];
      OK@1180250003 : Boolean;
      AccType@1180250002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
    BEGIN
      GenJnlLine.COPY(FromGenJnlLine);

      WITH GenJnlLine DO BEGIN
        GetCurrency(GenJnlLine);
        IF "Bal. Account Type" IN
           ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
        THEN BEGIN
          AccType := "Bal. Account Type";
          AccNo := "Bal. Account No.";
        END ELSE BEGIN
          AccType := "Account Type";
          AccNo := "Account No.";
        END;

        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
        CustLedgEntry.SETRANGE("Document No.",FromPostedInvNo);
        CustLedgEntry.FINDSET;

        IF "Applies-to ID" = '' THEN
          "Applies-to ID" := "Document No.";

        SetGenJnlLine(GenJnlLine,GenJnlLine.FIELDNO("Applies-to ID"));
        SetCustApplId(CustLedgEntry);

        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF CustLedgEntry.FIND('-') THEN BEGIN
          CurrencyCode2 := CustLedgEntry."Currency Code";
          REPEAT
            CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
          UNTIL CustLedgEntry.NEXT = 0;
          "Applies-to Doc. Type" := 0;
          "Applies-to Doc. No." := '';
          MODIFY;
        END;
        //Check Payment Tolerance
        IF  Amount <> 0 THEN
          IF NOT PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) THEN
            EXIT;
      END;//WITH
    END;

    PROCEDURE CheckAgainstApplnCurrency@1180250010(ApplnCurrencyCode@1000 : Code[10];CompareCurrencyCode@1001 : Code[10];AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';Message@1003 : Boolean) : Boolean;
    VAR
      Currency@1004 : Record 4;
      Currency2@1005 : Record 4;
      SalesSetup@1006 : Record 311;
      PurchSetup@1007 : Record 312;
      CurrencyAppln@1009 : 'No,EMU,All';
    BEGIN
      IF (ApplnCurrencyCode = CompareCurrencyCode) THEN
        EXIT(TRUE);

      CASE AccType OF
        AccType::Customer:
          BEGIN
            SalesSetup.GET;
            CurrencyAppln := SalesSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
        AccType::Vendor:
          BEGIN
            PurchSetup.GET;
            CurrencyAppln := PurchSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetCurrency@1180250008(VAR FromGenJnlLine@1180250001 : Record 81);
    BEGIN
      WITH FromGenJnlLine DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    PROCEDURE SetGenJnlLine@1180250013(NewGenJnlLine@1000 : Record 81;ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;
      GenJnlLineApply := TRUE;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
        ApplyingAmount := GenJnlLine.Amount;
      IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer THEN
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      CASE ApplnTypeSelect OF
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingCustLedgEntry;
    END;

    PROCEDURE SetApplyingCustLedgEntry@9();
    VAR
      "CustEntry-Edit"@1000 : Codeunit 103;
    BEGIN
      ApplyingCustLedgEntry."Entry No." := 1;
      ApplyingCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
      ApplyingCustLedgEntry."Document Type" := GenJnlLine."Document Type";
      ApplyingCustLedgEntry."Document No." := GenJnlLine."Document No.";
      ApplyingCustLedgEntry."Customer No." := GenJnlLine."Account No.";
      ApplyingCustLedgEntry.Description := GenJnlLine.Description;
      ApplyingCustLedgEntry."Currency Code" := GenJnlLine."Currency Code";
      ApplyingCustLedgEntry.Amount := GenJnlLine.Amount;
      ApplyingCustLedgEntry."Remaining Amount" := GenJnlLine.Amount;
      CalcApplnAmount;
    END;

    PROCEDURE CalcApplnAmount@1180250014();
    VAR
      ExchAccGLJnlLine@1000 : Codeunit 366;
      I@1001 : Integer;
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := FALSE;

      FindAmountRounding;
      IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer THEN
        ExchAccGLJnlLine.RUN(GenJnlLine);

      GenJnlLine2 := GenJnlLine;
      AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      AppliedCustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
      AppliedCustLedgEntry.SETRANGE(Open,TRUE);
      AppliedCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

      HandlChosenEntries(1,
        GenJnlLine2.Amount,
        GenJnlLine2."Currency Code",
        GenJnlLine2."Posting Date");
    END;

    PROCEDURE FindAmountRounding@7();
    BEGIN
      IF ApplnCurrencyCode = '' THEN BEGIN
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      END ELSE
        IF ApplnCurrencyCode <> Currency.Code THEN
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE HandlChosenEntries@1000000000(Type@1000 : 'Direct,GenJnlLine,SalesHeader';CurrentAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];"Posting Date"@1003 : Date);
    VAR
      AppliedCustLedgEntryTemp@1004 : TEMPORARY Record 21;
      PossiblePmtDisc@1007 : Decimal;
      OldPmtDisc@1008 : Decimal;
      CorrectionAmount@1009 : Decimal;
      CanUseDisc@1005 : Boolean;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      IF AppliedCustLedgEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          AppliedCustLedgEntryTemp := AppliedCustLedgEntry;
          AppliedCustLedgEntryTemp.INSERT;
        UNTIL AppliedCustLedgEntry.NEXT = 0;
      END ELSE
        EXIT;

      FromZeroGenJnl := (CurrentAmount = 0) AND (Type = Type::GenJnlLine);

      REPEAT
        IF NOT FromZeroGenJnl THEN
          AppliedCustLedgEntryTemp.SETRANGE(Positive,CurrentAmount < 0);
        IF AppliedCustLedgEntryTemp.FINDFIRST THEN BEGIN
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,"Posting Date");

          CASE Type OF
            //Type::Direct:
            //  CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscCust(CustLedgEntry,AppliedCustLedgEntryTemp,0,FALSE,FALSE);
            Type::GenJnlLine:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine2,AppliedCustLedgEntryTemp,0,FALSE)
            ELSE
              CanUseDisc := FALSE;
          END;


          IF CanUseDisc AND
             (ABS(AppliedCustLedgEntryTemp."Amount to Apply") >= ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
          THEN BEGIN
            IF (ABS(CurrentAmount) > ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
            THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
              CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
            END ELSE
              IF (ABS(CurrentAmount) = ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
              THEN BEGIN
                PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible" + PossiblePmtDisc;
                CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible" - PossiblePmtDisc;
                PossiblePmtDisc := 0;
                AppliedAmount := AppliedAmount + CorrectionAmount;
              END ELSE
                IF FromZeroGenJnl THEN BEGIN
                  PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  CurrentAmount := CurrentAmount +
                    AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END ELSE BEGIN
                  PossiblePmtDisc := AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  IF (CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" >= 0) <> (CurrentAmount >= 0) THEN BEGIN
                    PmtDiscAmount := PmtDiscAmount + PossiblePmtDisc;
                    AppliedAmount := AppliedAmount + CorrectionAmount;
                  END;
                  CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END;
          END ELSE BEGIN
            IF ((CurrentAmount - PossiblePmtDisc + AppliedCustLedgEntryTemp."Amount to Apply") * CurrentAmount) <= 0 THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + PossiblePmtDisc;
              CurrentAmount := CurrentAmount - PossiblePmtDisc;
              PossiblePmtDisc := 0;
              AppliedAmount := AppliedAmount + CorrectionAmount;
            END;
            CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Amount to Apply";
          END;
        END ELSE BEGIN
          AppliedCustLedgEntryTemp.SETRANGE(Positive);
          AppliedCustLedgEntryTemp.FINDFIRST;
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,"Posting Date");
        END;

        IF OldPmtDisc <> PmtDiscAmount THEN
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Remaining Amount"
        ELSE
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Amount to Apply";
        OldPmtDisc := PmtDiscAmount;

        IF PossiblePmtDisc <> 0 THEN
          CorrectionAmount := AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Amount to Apply"
        ELSE
          CorrectionAmount := 0;

        IF NOT DifferentCurrenciesInAppln THEN
          DifferentCurrenciesInAppln := ApplnCurrencyCode <> AppliedCustLedgEntryTemp."Currency Code";

        AppliedCustLedgEntryTemp.DELETE;
        AppliedCustLedgEntryTemp.SETRANGE(Positive);

      UNTIL NOT AppliedCustLedgEntryTemp.FINDFIRST;
      CheckRounding;
    END;

    PROCEDURE CheckRounding@1180250020();
    BEGIN
      ApplnRounding := 0;

      IF ApplnCurrencyCode = '' THEN
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      ELSE BEGIN
        IF ApplnCurrencyCode <> GenJnlLine."Currency Code" THEN
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      END;

      IF (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) AND DifferentCurrenciesInAppln THEN
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    PROCEDURE SetCustApplId@1000000001(FromCustLedgEntry@1000000001 : Record 21);
    VAR
      CustLedgEntry@1000000000 : Record 21;
      GenJnlApply@1000000002 : Codeunit 225;
    BEGIN

      IF ApplyingCustLedgEntry."Entry No." <> 0 THEN
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,FromCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);


      CustLedgEntry.RESET;
      CustLedgEntry.SETRANGE("Document Type",FromCustLedgEntry."Document Type");
      CustLedgEntry.SETRANGE("Document No.",FromCustLedgEntry."Document No.");

      CustEntrySetApplID.SetApplId(CustLedgEntry,ApplyingCustLedgEntry,GenJnlLine."Applies-to ID");

      CalcApplnAmount;
    END;

    LOCAL PROCEDURE ExchangeAmountsOnLedgerEntry@20(Type@1003 : 'Direct,GenJnlLine,SalesHeader';CurrencyCode@1000 : Code[10];VAR CalcCustLedgEntry@1001 : Record 21;PostingDate@1004 : Date);
    VAR
      CalculateCurrency@1002 : Boolean;
    BEGIN
      CalcCustLedgEntry.CALCFIELDS("Remaining Amount");

      IF Type = Type::Direct THEN
        CalculateCurrency := ApplyingCustLedgEntry."Entry No." <> 0
      ELSE
        CalculateCurrency := TRUE;

      IF (CurrencyCode <> CalcCustLedgEntry."Currency Code") AND CalculateCurrency THEN BEGIN
        CalcCustLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Amount",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Pmt. Disc. Possible",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Amount to Apply",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
      END;
    END;

    LOCAL PROCEDURE ImportOnAfterValidate@1000000020();
    BEGIN
      //BC6 EABO Multiple banks
      IF Import THEN
        BankAccountCode := BankAccountFilter
      ELSE BankAccountCode := '';
    END;

    BEGIN
    {
      21/11/2019 :
         BC6 EABO Multiple banks
    }
    END.
  }
  RDLDATA
  {
  }
}

